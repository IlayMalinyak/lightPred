def plot_diffs(data_dir, model_name, target, output, diff, conf):
    fig, subplot = plt.subplots(2,3)
    bins = np.linspace(0, 90, 7)
    for i in range(1,7):
        idx = np.where((target >= bins[i-1]) & (target < bins[i]))
        subplot[(i-1)//3, (i-1)%3].scatter(diff[idx,0], diff[idx,1])
        subplot[(i-1)//3, (i-1)%3].set_title(f"{int(bins[i-1])}-{int(bins[i])} deg")
        subplot[(i-1)//3, (i-1)%3].set_xlabel("inclination difference")
        subplot[(i-1)//3, (i-1)%3].set_ylabel("period difference")
    fig.tight_layout()
    plt.savefig(f"{data_dir}/diffs.png")
    plt.clf()
    plt.scatter(target[:,0], diff[:,1])
    plt.xlabel("Inclination")
    plt.ylabel("Period difference")
    plt.title(f"{model_name} difference")
    plt.savefig(f"{data_dir}/diff_period.png")
    plt.clf()
    plt.scatter(target[:,1], diff[:,0])
    plt.xlabel("Period")
    plt.ylabel("Inclination difference")
    plt.title(f"{model_name} difference")
    plt.savefig(f"{data_dir}/diff_inclination.png")
    plt.clf()
    if len(conf):
        # print(diff[:,0].shape, conf[:,0].shape)
        plt.scatter(1-conf[:,0], diff[:,0])
        plt.xlabel("Inclination confidence")
        plt.ylabel("Inclination difference")
        plt.title(f"{model_name} difference")
        plt.savefig(f"{data_dir}/conf_inclination.png")
        plt.clf()
    
        plt.scatter(1-conf[:,1], diff[:,1])
        plt.xlabel("Period confidence")
        plt.ylabel("Period difference")
        plt.title(f"{model_name} difference")
        plt.savefig(f"{data_dir}/conf_period.png")
        plt.clf()

def plot_confusion_mat(y, y_pred, data_dir, model_name, name, save_dir):
    print(y[:10], y_pred[:10])
    cm = confusion_matrix(y, y_pred, normalize='true')
    plt.imshow(cm, cmap=plt.cm.Blues)
    plt.xlabel("Predicted labels")
    plt.ylabel("True labels")
    plt.xticks([], [])
    plt.yticks([], [])
    plt.title(f"{model_name} - {name} confusion matrix")
    plt.colorbar()
    plt.savefig(f"{save_dir}/{name}_confusion.png")
    plt.clf()

       
def plot_results_cls(data_dir, model_name, pred, target, test_acc, name):
    coords, counts = count_occurence(target, pred)
    plt.scatter(coords[:, 0], coords[:, 1], c=counts, cmap='viridis')
    plt.title(f"{model_name} {name}  acc={test_acc:.2f}")
    plt.xlabel(f"true {name}")
    plt.ylabel(f"predicted {name}")
    plt.colorbar(label='points frequency')
    plt.savefig(f"{data_dir}/{name}_cls.png")
    plt.close()

def plot_thresholded_acc(correct_thresh, len_thresh, dataset_len, data_dir, model_name, name):
    threshs = np.linspace(0, 1, 20)
    
    acc_thresh = correct_thresh/len_thresh
    plt.scatter(threshs, acc_thresh, label='acc_thresh')
    plt.scatter(threshs, len_thresh/dataset_len, label='dataset_ratio')
    plt.plot(threshs, (acc_thresh*len_thresh)/dataset_len, '--', label='acc_thresh*dataset_ratio')
    plt.title(f"{model_name} {name} threshold test")
    plt.xlabel("threshold value")
    plt.ylabel("accuracy(dataset_ratio)")
    plt.legend()
    plt.savefig(f"{data_dir}/{name}_cls_thresh.png")
    plt.clf()